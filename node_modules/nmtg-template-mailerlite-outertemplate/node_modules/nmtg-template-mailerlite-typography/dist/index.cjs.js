'use strict';

class Errors {
  ERROR_MESSAGE = (message) => {
    return `Error in component: "${this.component}",  error message: "${message}"`;
  };
  component = '';

  constructor(component = 'No component') {
    this.component = component;
  }

  add(error) {
    const textError = this.ERROR_MESSAGE(error);
    throw new Error(textError);
  }
}

const customError$1 = new Errors('link');

const linkComponent = (params) => {
  if (typeof params != 'object') {
    customError$1.add('"params" is not "object"');
  }

  if (typeof params.attributes == '') {
    customError$1.add('empty attributes');
  }

  if (typeof params.content == '') {
    customError$1.add('empty content');
  }

  const { attributes, content } = params;

  return `<a ${attributes}>${content}</a>`;
};

// Content Button

// we will probably loose id param during changes that Arthur is doing.
const buttonMainBlock = (id, href, text) => {
  return `<a class="mlContentButton" href="${href}" data-link-id="${id}" 
  style="font-family: "Poppins", sans-serif; background-color: #d6685e; border-radius: 3px; color: #ffffff; display: inline-block; font-size: 17px; font-weight: 400; line-height: 23px; padding: 15px 0 15px 0; text-align: center; text-decoration: none; width: 260px;" target="_self">
  ${text}
  </a>`;
};

const buttonComponent = (params) => {
  const { id, href, text } = params;
  const error = new Errors('contentButton');

  if (id == '') {
    error.add('No id button');
  }
  if (href == '') {
    error.add('No href button');
  }
  if (text == '') {
    error.add('No text button');
  }

  return buttonMainBlock(id, href, text);
};

// Component heading

// TODO replace with a link component
const headingMainBlock = (hrefTitle, idTitle, textTitle) => {
  return `<a href="${hrefTitle}" data-link-id="${idTitle}" style="text-decoration: none; color: #111111; text-transform: none; font-style: normal; text-decoration: none;" target="_self">${textTitle}</a>`;
};

function heading (params) {
  const { hrefTitle, idTitle, textTitle } = params;
  const error = new Errors('contentTitleText');

  if (hrefTitle == '') {
    error.add('No hrefTitle');
  }
  if (idTitle == '') {
    error.add('No idTitle');
  }
  if (textTitle == '') {
    error.add('No textTitle');
  }

  return headingMainBlock(hrefTitle, idTitle, textTitle);
}

// Create strong component

const strongMainBlock = (content) => {
  return `<strong>${content}</strong>`;
};

function strong (content) {
  const error = new Errors('strong');

  if (content == '') {
    error.add('No content');
  }

  return strongMainBlock(content);
}

// Component contentSubTitleText

const subHeadingMainBlock = (subTitleText) => {
  return `<td align="center" class="bodyTitle" style="font-family: 'Poppins', sans-serif; font-size: 19px; font-weight: 400; line-height: 150%; color: #111111; text-transform: none; font-style: normal; text-decoration: none; text-align: center;">${subTitleText}</td>`;
};

const renderSubHeading = (params) => {
  const { subTitleText } = params;
  const error = new Errors('contentSubTitleText');

  if (subTitleText == '') {
    error.add('No subTitleText');
  }

  return subHeadingMainBlock(subTitleText);
};

// <span style="color: #111111;">Unsubscribe</span>
const spanHeadingBlock = (title) => {
  return `<span style="color: #111111;">${title}</span>`;
};

const customError = new Errors('paragraph');

const paragraphComponent = (params) => {
  if (typeof params != 'object') {
    customError.add('"params" is not "object"');
  }

  if (typeof params.attributes == '') {
    customError.add('empty attributes');
  }

  if (typeof params.content == '') {
    customError.add('empty content');
  }

  const { attributes, content } = params;

  return `<p ${attributes}>${content}</p>`;
};

const separatorComponent = () => {
    return `<table align="center" border="0" bgcolor="#ffffff" class="mlContentTable mlContentTableDefault" cellpadding="0" cellspacing="0" width="640">
    <tbody><tr>
      <td class="mlContentTableCardTd">
        <table align="center" bgcolor="#ffffff" border="0" cellpadding="0" cellspacing="0" class="mlContentTable ml-default" style="width: 640px; min-width: 640px;" width="640">
          <tbody><tr>
            <td>
              <table role="presentation" cellpadding="0" cellspacing="0" border="0" align="center" width="640" style="width: 640px; min-width: 640px;" class="mlContentTable">
                <tbody><tr>
                  <td height="20" class="spacingHeight-20" style="line-height: 20px; min-height: 20px;"></td>
                </tr>
              </tbody></table>
              <table role="presentation" cellpadding="0" cellspacing="0" border="0" align="center" width="640" style="width: 640px; min-width: 640px;" class="mlContentTable">
                <tbody><tr>
                  <td align="center" class="">
                    <table role="presentation" cellpadding="0" cellspacing="0" border="0" align="center" width="100%" style="border-top: 1px solid #ededf3; border-collapse: initial;" class="">
                      <tbody><tr>
                        <td height="20" class="spacingHeight-20" style="line-height: 20px; min-height: 20px;"></td>
                      </tr>
                    </tbody></table>
                  </td>
                </tr>
              </tbody></table>
            </td>
          </tr>
        </tbody></table>
      </td>
    </tr>
    </tbody></table>`;
};

// Error

// if (typeof params != 'object') {
//   customError.add('"params" is not "object"');
// }

// if (typeof params.attributes == '') {
//   customError.add('empty attributes');
// }
const imageComponent = (attributes) => {
  // const { src, width } = attributes;

  // if(!width){
  //   return  `<img src="${src}" border="0" alt=""  style="display: block;">`;
  // }


  // return `<img src="${src}" border="0" alt="" width="${width}" style="display: block;">`;

  return `<img ${attributes}>`;
};
// return `<img src="${src}" border="0" alt="" width="${width}" style="display: block;">`;

//function createPathToImage(src) {
//  return pathToImages + src;
//}

const imgWrapper = (params) => {
  const { id, href, src, width } = params;

  const error = new Errors('image');

  if (id == '') {
    error.add('No id');
  }
  if (href == '') {
    error.add('No href');
  }
  if (src == '') {
    error.add('No src');
  }

  return imageMainBlock(id, href, src, width);
};

// Main image block start
// const obj = {
//   src: createPathToImage(src),
//   width: 267, // TODO check if width must be string
// };

// TODO move into Link + Image component
const imageMainBlock = (id, href, src, width) => {


  // const imagePath = ;

  const attr = `src="${src}" 
    border="0" alt="" ` + 
    (width === undefined ? `` : `width="${width}"`) +
     ` style="display: block;"`;
     
  const image = imageComponent(attr);

  const params = {
    attributes: `href="${href}" data-link-id="${id}" target="_self"`,
    content: image,
  };
  return linkComponent(params);
};

exports.buttonComponent = buttonComponent;
exports.heading = heading;
exports.imageComponent = imageComponent;
exports.imgWrapper = imgWrapper;
exports.linkComponent = linkComponent;
exports.paragraphComponent = paragraphComponent;
exports.renderSubHeading = renderSubHeading;
exports.separatorComponent = separatorComponent;
exports.spanHeadingBlock = spanHeadingBlock;
exports.strong = strong;
