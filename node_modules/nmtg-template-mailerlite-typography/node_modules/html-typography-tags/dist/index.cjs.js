'use strict';

var stringifyAttributes$1 = require('stringify-attributes');

// import customErrors from './Errors';
// const customError = new customErrors('link');

// import ow from 'ow';

const linkComponent = (params) => {
  // if (typeof params != 'object') {
  //   customError.add('"params" is not "object"');
  // }

  // if (typeof params.attributes == '') {
  //   customError.add('empty attributes');
  // }

  // if (typeof params.content == '') {
  //   customError.add('empty content');
  // }


  const attributesStr = stringifyAttributes$1(attributes);

  const { attributes, content } = params;

  return `<a ${attributesStr}>${content}</a>`;
};

// import Errors from './Errors';

// stringifyAttributes({
//   rainbow: true,
//   number: 1,
//   multiple: ['a', 'b'],
// });


const buttonComponent = (params) => {
  const attributes = {
    id: params.id,
    class: `mlContentButton`,
    href: params.href,
    'data-link-id': params.id,
    style: `font-family: "Poppins", sans-serif; background-color: #d6685e; border-radius: 3px; color: #ffffff; display: inline-block; font-size: 17px; font-weight: 400; line-height: 23px; padding: 15px 0 15px 0; text-align: center; text-decoration: none; width: 260px;`,
  };

  const attributesStr = stringifyAttributes$1(attributes);

  // console.log(attributesStr);

  return linkComponent({ content: params.text, attributesStr });
};

// TODO think about renaming content into children
const divComponent = (params) => {
    // if (typeof params != 'object') {
    //   customError.add('"params" is not "object"');
    // }
  
    // if (typeof params.attributes == '') {
    //   customError.add('empty attributes');
    // }
  
    // if (typeof params.content == '') {
    //   customError.add('empty content');
    // }
  
    const { attributes, content } = params;

    const attributesStr = stringifyAttributes$1(attributes);
 

    return `<div ${attributesStr}>${content}</div>`;
  };

const headingOneComponent = (params) => {
    const { attributes, children } = params;
    const attributesStr = stringifyAttributes$1(attributes);

    return `<h1 ${attributesStr}>${children}</h1>`;
};

// Component heading


// TODO replace with a link component
// const headingMainBlock = (hrefTitle, idTitle, textTitle) => {
//   return `<a href="${hrefTitle}" 
//   data-link-id="${idTitle}" 
//   style="text-decoration: none; color: #111111; text-transform: none; font-style: normal; text-decoration: none;" 
//   target="_self">${textTitle}</a>`;
// };


const headingNMTG = (params) => {
  const attributes = {
    target: `_self`,
    href: params.href,
    'data-link-id': params.id,
    style: `text-decoration: none; color: #111111; text-transform: none; font-style: normal; text-decoration: none;`,
  };

  const attributesStr = stringifyAttributes$1(attributes);

  // console.log(attributesStr);

  return linkComponent({ content: params.text, attributesStr });

};
//-----------------------------
//   if (hrefTitle == '') {
//     error.add('No hrefTitle');
//   }
//   if (idTitle == '') {
//     error.add('No idTitle');
//   }
//   if (textTitle == '') {
//     error.add('No textTitle');
//   }

const headingComponent = (params) => {
    const { attributes, children } = params;
    const attributesStr = stringifyAttributes$1(attributes);

    return `<h3 ${attributesStr}>${children}</h3>`;
};

// Error

const imageComponent = (params) => {

  const attributes = {
    src: params.src,
    style: `display: block;`,
    border:"0",
    alt:"",
    width: params.width, // TODO test if it can work withot width param or not
  };


  const attributesStr = stringifyAttributes$1(attributes);

  // console.log(attributesStr);

  return  `<img ${attributesStr} >`;

};


//------------------------------------------
//------------------------------------------

//   const { id, href, src, width } = params;

//   const error = new Errors('image');

//   if (id == '') {
//     error.add('No id');
//   }
//   if (href == '') {
//     error.add('No href');
//   }
//   if (src == '') {
//     error.add('No src');
//   }

//------------------------------------------
//------------------------------------------

// import linkComponent from './link';



// const imageComponentOld = (attributes) => {
//   const { src, width } = attributes;

//   if(!width){
//     return  `<img src="${src}" border="0" alt=""  style="display: block;">`;
//   }

//   return `<img src="${src}" border="0" alt="" width="${width}" style="display: block;">`;
// } 

// if (typeof params != 'object') {
//   customError.add('"params" is not "object"');
// }

// if (typeof params.attributes == '') {
//   customError.add('empty attributes');
// }


  // const { src, width } = attributes;

  // if(!width){
  //   return  `<img src="${src}" border="0" alt=""  style="display: block;">`;
  // }


  // return `<img src="${src}" border="0" alt="" width="${width}" style="display: block;">`;

// TODO upgrade it
const imageLink = (id, href, src, width) => {


    const image_attributes = {
      src, width
    };
  
    const image = imageComponent(image_attributes);
  
    // const imagePath = ;
  
    // const attr = `src="${src}" 
    //   border="0" alt="" ` + 
    //   (width === undefined ? `` : `width="${width}"`) +
    //    ` style="display: block;"`;
       
    // const image = imageComponent(attr);
  
    const link_attributes = {
      href, 
      'data-link-id': id,
      target: "_self",
    };
  
    const params = {
      attributes: stringifyAttributes$1(link_attributes),
      content: image,
    };
    return linkComponent(params);
  };

// import stringifyAttributes from 'stringify-attributes';

// TODO think about renaming content into children
const italicComponent = (params) => {
    // if (typeof params != 'object') {
    //   customError.add('"params" is not "object"');
    // }
  
    // if (typeof params.attributes == '') {
    //   customError.add('empty attributes');
    // }
  
    // if (typeof params.content == '') {
    //   customError.add('empty content');
    // }
  
    const { attributes, content } = params;

    // const attributesStr = stringifyAttributes(attributes);
 

    return `<i>${content}</i>`;
  };


//   const italicComponent = ({content}) => {
//     return `<i>${content}</i>`;
// }

// export default italicComponent;

const listComponent = (params) => {

    const { attributes, children } = params;
    const attributesStr = stringifyAttributes$1(attributes);

    return `<ul ${attributesStr}>${children}</ul>`;
};

const listItemComponent = (params) => {

    const { attributes, children } = params;
    const attributesStr = stringifyAttributes$1(attributes);

    return `<li ${attributesStr}>${children}</li>`;};

const paragraphComponent = (params) => {
    // if (typeof params != 'object') {
    //   customError.add('"params" is not "object"');
    // }
  
    // if (typeof params.attributes == '') {
    //   customError.add('empty attributes');
    // }
  
    // if (typeof params.content == '') {
    //   customError.add('empty content');
    // }
  
    const { attributes, content } = params;

    const attributesStr = stringifyAttributes$1(attributes);
 

    return `<p ${attributesStr}>${content}</p>`;
  };

// Create strong component
// TODO should we replace content with child as we might have other components inside?
const strongComponent = (params) => {

    const { attributes, content } = params;
    const attributesStr = stringifyAttributes(attributes);

    return `<strong ${attributesStr}>${content}</strong>`;
};


// const error = new Errors('strong');

// if (content == '') {
// error.add('No content');
// }

const config = {
  id: '12',
  href: 'google.com'
};
console.log(buttonComponent(config));

exports.buttonComponent = buttonComponent;
exports.divComponent = divComponent;
exports.heading = headingNMTG;
exports.headingComponent = headingComponent;
exports.headingOneComponent = headingOneComponent;
exports.imageComponent = imageComponent;
exports.imageLink = imageLink;
exports.italicComponent = italicComponent;
exports.linkComponent = linkComponent;
exports.listComponent = listComponent;
exports.listItemComponent = listItemComponent;
exports.paragraphComponent = paragraphComponent;
exports.strongComponent = strongComponent;
